diff -Nur root-6.06.02.orig/cmake/modules/FindDPM.cmake root-6.06.02/cmake/modules/FindDPM.cmake
--- root-6.06.02.orig/cmake/modules/FindDPM.cmake	1970-01-01 01:00:00.000000000 +0100
+++ root-6.06.02/cmake/modules/FindDPM.cmake	2016-03-20 17:08:52.124461048 +0100
@@ -0,0 +1,23 @@
+# - Locate dpm library
+# Defines:
+#
+#  DPM_FOUND
+#  DPM_INCLUDE_DIR
+#  DPM_INCLUDE_DIRS (not cached)
+#  DPM_LIBRARIES
+
+set(DPM_FOUND FALSE)
+
+find_path(DPM_INCLUDE_DIR NAMES dpm_api.h HINTS ${DPM_DIR}/include $ENV{DPM_DIR}/include /usr/include PATH_SUFFIXES dpm)
+find_library(DPM_dpm_LIBRARY NAMES dpm HINTS ${DPM_DIR}/lib $ENV{DPM_DIR}/lib)
+find_library(DPM_lcgdm_LIBRARY NAMES lcgdm HINTS ${DPM_DIR}/lib $ENV{DPM_DIR}/lib)
+
+set(DPM_INCLUDE_DIRS ${DPM_INCLUDE_DIR})
+set(DPM_LIBRARIES ${DPM_dpm_LIBRARY} ${DPM_lcgdm_LIBRARY})
+
+if (DPM_INCLUDE_DIR AND DPM_dpm_LIBRARY AND DPM_lcgdm_LIBRARY)
+  set(DPM_FOUND TRUE)
+  message(STATUS "Found DPM at: ${DPM_LIBRARIES}")
+endif()
+
+mark_as_advanced(DPM_FOUND DPM_INCLUDE_DIR DPM_dpm_LIBRARY DPM_lcgdm_LIBRARY)
diff -Nur root-6.06.02.orig/cmake/modules/FindGFAL.cmake root-6.06.02/cmake/modules/FindGFAL.cmake
--- root-6.06.02.orig/cmake/modules/FindGFAL.cmake	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/cmake/modules/FindGFAL.cmake	2016-03-20 17:08:52.162461425 +0100
@@ -6,15 +6,18 @@
 #  GFAL_INCLUDE_DIRS (not cached)
 #  GFAL_LIBRARIES
 
-find_path(GFAL_INCLUDE_DIR NAMES gfal_api.h HINTS ${GFAL_DIR}/include $ENV{GFAL_DIR}/include)
+find_path(GFAL_INCLUDE_DIR NAMES gfal_api.h HINTS ${GFAL_DIR}/include $ENV{GFAL_DIR}/include /usr/include/gfal2 /usr/include)
 find_library(GFAL_LIBRARIES NAMES gfal gfal2 HINTS ${GFAL_DIR}/lib $ENV{GFAL_DIR}/lib)
-find_path(SRM_IFCE_INCLUDE_DIR  gfal_srm_ifce_types.h HINTS ${SRM_IFCE_DIR}/include $ENV{SRM_IFCE_DIR}/include)
+find_path(SRM_IFCE_INCLUDE_DIR gfal_srm_ifce_types.h HINTS ${SRM_IFCE_DIR}/include $ENV{SRM_IFCE_DIR}/include /usr/include)
 
-set(GFAL_INCLUDE_DIRS ${GFAL_INCLUDE_DIR} ${SRM_IFCE_INCLUDE_DIR})
+find_package(PkgConfig)
+pkg_check_modules (GLIB2 glib-2.0)
+
+set(GFAL_INCLUDE_DIRS ${GFAL_INCLUDE_DIR} ${SRM_IFCE_INCLUDE_DIR} ${GLIB2_INCLUDE_DIRS})
 
 # handle the QUIETLY and REQUIRED arguments and set GFAL_FOUND to TRUE if
 # all listed variables are TRUE
 INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(GFAL DEFAULT_MSG GFAL_INCLUDE_DIR SRM_IFCE_INCLUDE_DIR GFAL_LIBRARIES)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(GFAL DEFAULT_MSG GFAL_LIBRARIES GFAL_INCLUDE_DIR SRM_IFCE_INCLUDE_DIR GLIB2_INCLUDE_DIRS)
 
 mark_as_advanced(GFAL_FOUND GFAL_INCLUDE_DIR GFAL_LIBRARIES SRM_IFCE_INCLUDE_DIR)
diff -Nur root-6.06.02.orig/cmake/modules/FindGlobus.cmake root-6.06.02/cmake/modules/FindGlobus.cmake
--- root-6.06.02.orig/cmake/modules/FindGlobus.cmake	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/cmake/modules/FindGlobus.cmake	2016-03-20 17:08:52.183461633 +0100
@@ -9,7 +9,7 @@
 
 find_path(GLOBUS_INCLUDE_DIR NAMES globus_common.h
           HINTS ${GLOBUS_DIR}/include $ENV{GLOBUS_LOCATION}/include
-                /opt/globus/include
+                /opt/globus/include /usr/include
           PATH_SUFFIXES gcc32 gcc32dbg gcc32pthr gcc32dbgpthr
                         gcc64 gcc64dbg gcc64pthr gcc64dbgpthr globus)
 
@@ -24,7 +24,7 @@
               openssl gsi_proxy_core callout)
 
 foreach( lib ${libraries})
-  find_library(GLOBUS_${lib}_LIBRARY NAMES globus_${lib}_${flavour} HINTS
+  find_library(GLOBUS_${lib}_LIBRARY NAMES globus_${lib}_${flavour} globus_${lib} HINTS
                ${GLOBUS_DIR}/lib $ENV{GLOBUS_LOCATION}/lib)
   if(GLOBUS_${lib}_LIBRARY)
     set(GLOBUS_${lib}_FOUND 1)
diff -Nur root-6.06.02.orig/cmake/modules/Findhdfs.cmake root-6.06.02/cmake/modules/Findhdfs.cmake
--- root-6.06.02.orig/cmake/modules/Findhdfs.cmake	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/cmake/modules/Findhdfs.cmake	2016-03-20 17:08:52.185461652 +0100
@@ -6,7 +6,7 @@
 #  HDFS_INCLUDE_DIRS (not cached)
 #  HDFS_LIBRARIES
 
-find_path(HDFS_INCLUDE_DIR NAMES hdfs.h  HINTS ${HDFS_DIR}/include $ENV{HDFS_DIR}/include)
+find_path(HDFS_INCLUDE_DIR NAMES hdfs.h  HINTS ${HDFS_DIR}/include $ENV{HDFS_DIR}/include /usr/include/hadoop)
 find_library(HDFS_LIBRARY NAMES hdfs HINTS ${HDFS_DIR}/lib/native $ENV{HDFS_DIR}/lib/native)
 
 set(HDFS_INCLUDE_DIRS ${HDFS_INCLUDE_DIR})
diff -Nur root-6.06.02.orig/cmake/modules/FindOCC.cmake root-6.06.02/cmake/modules/FindOCC.cmake
--- root-6.06.02.orig/cmake/modules/FindOCC.cmake	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/cmake/modules/FindOCC.cmake	2016-03-20 17:08:52.184461642 +0100
@@ -11,7 +11,7 @@
 
 find_path(OCC_INCLUDE_DIR
           NAMES Standard_Real.hxx
-          HINTS ${_occdirs} /usr/include/opencascade
+          HINTS ${_occdirs} /usr/include/opencascade /usr/include/oce
           PATH_SUFFIXES inc
           DOC "Specify the directory containing Standard_Real.hxx")
 
diff -Nur root-6.06.02.orig/cmake/modules/FindPCRE.cmake root-6.06.02/cmake/modules/FindPCRE.cmake
--- root-6.06.02.orig/cmake/modules/FindPCRE.cmake	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/cmake/modules/FindPCRE.cmake	2016-03-20 17:08:52.184461642 +0100
@@ -2,8 +2,8 @@
 #
 # This module defines
 # PCRE_INCLUDE_DIR, where to locate PCRE header files
-# PCRE_LIBRARIES, the libraries to link against to use Pythia6
-# PCRE_FOUND.  If false, you cannot build anything that requires Pythia6.
+# PCRE_LIBRARIES, the libraries to link against to use PCRE
+# PCRE_FOUND.  If false, you cannot build anything that requires PCRE.
 
 if(PCRE_CONFIG_EXECUTABLE)
   set(PCRE_FIND_QUIETLY 1)
diff -Nur root-6.06.02.orig/cmake/modules/SearchInstalledSoftware.cmake root-6.06.02/cmake/modules/SearchInstalledSoftware.cmake
--- root-6.06.02.orig/cmake/modules/SearchInstalledSoftware.cmake	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/cmake/modules/SearchInstalledSoftware.cmake	2016-03-20 17:08:52.186461662 +0100
@@ -446,15 +446,29 @@
 endif()
 
 #---Check for Castor-------------------------------------------------------------------
-if(castor OR rfio)
+if(castor)
   message(STATUS "Looking for Castor")
   find_package(Castor)
   if(NOT CASTOR_FOUND)
     if(fail-on-missing)
       message(FATAL_ERROR "Castor libraries not found and they are required (castor option enabled)")
     else()
-      message(STATUS "Castor not found. Switching off castor/rfio option")
+      message(STATUS "Castor not found. Switching off castor option")
       set(castor OFF CACHE BOOL "" FORCE)
+    endif()
+  endif()
+endif()
+
+#---Check for RFIO-------------------------------------------------------------------
+if(rfio)
+  message(STATUS "Looking for RFIO")
+  find_package(Castor)
+  find_package(DPM)
+  if(NOT CASTOR_FOUND AND NOT DPM_FOUND)
+    if(fail-on-missing)
+      message(FATAL_ERROR "Castor or DPM libraries not found and one of them is required (rfio option enabled)")
+    else()
+      message(STATUS "Castor or DPM not found. Switching off rfio option")
       set(rfio OFF CACHE BOOL "" FORCE)
     endif()
   endif()
diff -Nur root-6.06.02.orig/io/hdfs/CMakeLists.txt root-6.06.02/io/hdfs/CMakeLists.txt
--- root-6.06.02.orig/io/hdfs/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ root-6.06.02/io/hdfs/CMakeLists.txt	2016-03-20 17:08:52.186461662 +0100
@@ -0,0 +1,10 @@
+############################################################################
+# CMakeLists.txt file for building ROOT io/hdfs package
+############################################################################
+
+include_directories(${HDFS_INCLUDE_DIRS})
+
+ROOT_GENERATE_DICTIONARY(G__HDFS *.h MODULE HDFS LINKDEF LinkDef.h)
+
+ROOT_LINKER_LIBRARY(HDFS *.cxx G__HDFS.cxx LIBRARIES Core ${HDFS_LIBRARIES} DEPENDENCIES Net RIO)
+ROOT_INSTALL_HEADERS()
diff -Nur root-6.06.02.orig/io/rfio/CMakeLists.txt root-6.06.02/io/rfio/CMakeLists.txt
--- root-6.06.02.orig/io/rfio/CMakeLists.txt	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/io/rfio/CMakeLists.txt	2016-03-20 17:08:52.186461662 +0100
@@ -2,10 +2,16 @@
 # CMakeLists.txt file for building ROOT io/rfio package
 ############################################################################
 
-include_directories(${CASTOR_INCLUDE_DIR})
-
 ROOT_GENERATE_DICTIONARY(G__RFIO *.h MODULE RFIO  LINKDEF LinkDef.h)
 
+if(CASTOR_FOUND)
+include_directories(${CASTOR_INCLUDE_DIR})
 ROOT_LINKER_LIBRARY(RFIO *.cxx G__RFIO.cxx LIBRARIES Core ${CASTOR_LIBRARIES}
     ${CASTOR_rfio_LIBRARY} ${CASTOR_common_LIBRARY} ${CASTOR_client_LIBRARY} DEPENDENCIES Net RIO)
+else()
+include_directories(${DPM_INCLUDE_DIR})
+ROOT_LINKER_LIBRARY(RFIO *.cxx G__RFIO.cxx LIBRARIES Core ${DPM_LIBRARIES}
+    DEPENDENCIES Net RIO)
+endif()
+
 ROOT_INSTALL_HEADERS()
diff -Nur root-6.06.02.orig/net/globusauth/CMakeLists.txt root-6.06.02/net/globusauth/CMakeLists.txt
--- root-6.06.02.orig/net/globusauth/CMakeLists.txt	2016-03-03 10:36:03.000000000 +0100
+++ root-6.06.02/net/globusauth/CMakeLists.txt	2016-03-20 17:08:52.207461871 +0100
@@ -8,7 +8,6 @@
 endif()
 
 ROOT_LINKER_LIBRARY(GlobusAuth *.cxx  LIBRARIES Core ${GLOBUS_LIBRARIES} ${OPENSSL_LIBRARIES}  ${CMAKE_DL_LIBS} DEPENDENCIES RootAuth Net)
-ROOT_INSTALL_HEADERS()
 
 if(builtin_openssl)
   ROOT_ADD_BUILTIN_DEPENDENCIES(GlobusAuth OPENSSL)
