From e65727913e435819a3fc26513d9892d179eab1f2 Mon Sep 17 00:00:00 2001
From: Mattias Ellert <mattias.ellert@physics.uu.se>
Date: Wed, 8 Jul 2020 19:32:51 +0200
Subject: [PATCH 3/5] Adjust parameter names in doxygen markup so they match
 the code

Addresses warnings:

argument '<name>' of command @param is not found in the argument list
of <function>.
---
 .../pythonizations/src/PyzPythonHelpers.cxx   |  2 +-
 bindings/r/inc/TRInterface.h                  |  4 +--
 hist/hist/src/TF1.cxx                         |  5 ++-
 hist/hist/src/TGraph.cxx                      |  6 ++--
 hist/histpainter/src/TPainter3dAlgorithms.cxx |  6 ++--
 hist/histv7/inc/ROOT/RAxis.hxx                | 11 +++----
 hist/histv7/inc/ROOT/RHist.hxx                |  2 +-
 hist/unfold/src/TUnfoldBinning.cxx            | 24 +++++++-------
 hist/unfold/src/TUnfoldBinningXML.cxx         |  2 +-
 hist/unfold/src/TUnfoldDensity.cxx            |  2 +-
 hist/unfold/src/TUnfoldSys.cxx                |  7 ++--
 io/io/inc/ROOT/TBufferMerger.hxx              |  2 +-
 math/mathcore/inc/Math/IntegratorMultiDim.h   |  2 +-
 math/minuit2/inc/Minuit2/FCNBase.h            |  4 +--
 math/minuit2/inc/Minuit2/FumiliChi2FCN.h      |  2 +-
 math/minuit2/inc/Minuit2/FumiliErrorUpdator.h |  2 +-
 .../inc/Minuit2/FumiliMaximumLikelihoodFCN.h  |  2 +-
 roofit/roofit/src/RooExponential.cxx          |  2 +-
 roofit/roofit/src/RooGExpModel.cxx            | 32 +++++++++----------
 roofit/roofit/src/RooGaussian.cxx             |  2 +-
 roofit/roofit/src/RooJohnson.cxx              |  2 +-
 roofit/roofit/src/RooLandau.cxx               |  2 +-
 roofit/roofitcore/src/BatchData.cxx           |  2 +-
 roofit/roofitcore/src/RooAbsPdf.cxx           |  4 +--
 roofit/roofitcore/src/RooAbsReal.cxx          |  2 +-
 roofit/roofitcore/src/RooCustomizer.cxx       |  4 +--
 roofit/roofitcore/src/RooDataHist.cxx         |  4 +--
 roofit/roofitcore/src/RooDataSet.cxx          | 10 +++---
 roofit/roofitcore/src/RooFormulaVar.cxx       |  2 +-
 roofit/roofitcore/src/RooSuperCategory.cxx    |  2 +-
 roofit/roofitmore/src/RooHypatia2.cxx         |  6 ++--
 tmva/tmva/inc/TMVA/BDTEventWrapper.h          |  4 +--
 tmva/tmva/inc/TMVA/NeuralNet.h                | 14 +++-----
 tmva/tmva/inc/TMVA/NeuralNet.icc              |  2 +-
 tmva/tmva/inc/TMVA/RTensor.hxx                |  2 +-
 .../inc/TMVA/TreeInference/BranchlessTree.hxx |  4 +--
 tmva/tmva/inc/TMVA/TreeInference/Forest.hxx   |  2 +-
 tmva/tmva/src/BDTEventWrapper.cxx             |  2 +-
 tmva/tmva/src/CrossValidation.cxx             |  2 +-
 tmva/tmva/src/CvSplit.cxx                     | 18 +++++------
 tmva/tmva/src/Envelope.cxx                    | 12 +++----
 tree/dataframe/inc/ROOT/RDF/RInterface.hxx    | 16 +++++-----
 tree/dataframe/inc/ROOT/RDFHelpers.hxx        |  2 +-
 tree/dataframe/inc/ROOT/RDataSource.hxx       |  8 ++---
 tree/dataframe/inc/ROOT/RResultPtr.hxx        |  2 +-
 tree/dataframe/src/RArrowDS.cxx               |  4 +--
 tree/tree/inc/TTree.h                         |  2 +-
 tree/tree/src/TIOFeatures.cxx                 | 14 ++++----
 48 files changed, 131 insertions(+), 140 deletions(-)

diff --git a/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx b/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx
index 059debcee4..c5e354f300 100644
--- a/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx
+++ b/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx
@@ -99,7 +99,7 @@ PyObject *PyROOT::GetDataPointer(PyObject * /*self*/, PyObject *args)
 /// \brief Get endianess of the system
 /// \param[in] self Always null, since this is a module function.
 /// \param[in] args Pointer to an empty Python tuple.
-/// \param[out] Endianess as Python string
+/// \return Endianess as Python string
 ///
 /// This function returns endianess of the system as a Python integer. The
 /// return value is either '<' or '>' for little or big endian, respectively.
diff --git a/bindings/r/inc/TRInterface.h b/bindings/r/inc/TRInterface.h
index bdb559bfb5..e097007429 100644
--- a/bindings/r/inc/TRInterface.h
+++ b/bindings/r/inc/TRInterface.h
@@ -206,7 +206,7 @@ namespace ROOT {
          The command line arguments are by deafult argc=0 and argv=NULL,
          The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr         \note some time can produce so much noise in the output
          \param argc default 0
-         \param args default null
+         \param argv default null
          \param loadRcpp default true
          \param verbose default false
          \param interactive default true
@@ -226,7 +226,7 @@ namespace ROOT {
          /**
          Method to eval R code and you get the result in a reference to TRObject
          \param code R code
-         \param ands reference to TRObject
+         \param ans reference to TRObject
          \return an true or false if the execution was sucessful or not.
          */
          Int_t Eval(const TString &code, TRObject  &ans); // parse line, returns in ans; error code rc
diff --git a/hist/hist/src/TF1.cxx b/hist/hist/src/TF1.cxx
index a72b309c1e..0b7c0b5e45 100644
--- a/hist/hist/src/TF1.cxx
+++ b/hist/hist/src/TF1.cxx
@@ -1973,12 +1973,11 @@ Double_t TF1::GetProb() const
 ///        F(x_{\frac{1}{2}}) = \prod(x < x_{\frac{1}{2}}) = \frac{1}{2}
 /// \f]
 ///
-/// \param[in] this TF1 function
 /// \param[in] nprobSum maximum size of array q and size of array probSum
+/// \param[out] q array filled with nq quantiles
 /// \param[in] probSum array of positions where quantiles will be computed.
 ///     It is assumed to contain at least nprobSum values.
-/// \param[out] return value nq (<=nprobSum) with the number of quantiles computed
-/// \param[out] array q filled with nq quantiles
+/// \return value nq (<=nprobSum) with the number of quantiles computed
 ///
 ///  Getting quantiles from two histograms and storing results in a TGraph,
 ///  a so-called QQ-plot
diff --git a/hist/hist/src/TGraph.cxx b/hist/hist/src/TGraph.cxx
index b6e05a4a9c..614c63d697 100644
--- a/hist/hist/src/TGraph.cxx
+++ b/hist/hist/src/TGraph.cxx
@@ -1900,9 +1900,9 @@ Int_t TGraph::IsInside(Double_t x, Double_t y) const
 /// Least squares polynomial fitting without weights.
 ///
 /// \param [in] m     number of parameters
-/// \param [in] ma     array of parameters
-/// \param [in] mfirst 1st point number to fit (default =0)
-/// \param [in] mlast  last point number to fit (default=fNpoints-1)
+/// \param [in] a     array of parameters
+/// \param [in] xmin  1st point number to fit (default =0)
+/// \param [in] xmax  last point number to fit (default=fNpoints-1)
 ///
 /// based on CERNLIB routine LSQ: Translated to C++ by Rene Brun
 
diff --git a/hist/histpainter/src/TPainter3dAlgorithms.cxx b/hist/histpainter/src/TPainter3dAlgorithms.cxx
index e0dd1f28e4..a95ac36d2d 100644
--- a/hist/histpainter/src/TPainter3dAlgorithms.cxx
+++ b/hist/histpainter/src/TPainter3dAlgorithms.cxx
@@ -3122,8 +3122,8 @@ L500:
 /// Set light source
 ///
 /// \param[in] nl   source number: 1 off all light sources, 0 set diffused light
-/// \param[in] xl   intensity of the light source
-/// \param[in] xscr   `yscr` `zscr`  direction of the light (in respect of the screen)
+/// \param[in] yl   intensity of the light source
+/// \param[in] xscr, yscr, zscr  direction of the light (in respect of the screen)
 ///
 /// \param[out] irep   reply (0 - O.K, -1 error)
 
@@ -4074,7 +4074,7 @@ L500:
 /// \param[in] qqa   diffusion coefficient for diffused light  [0.,1.]
 /// \param[in] qqd   diffusion coefficient for direct light    [0.,1.]
 /// \param[in] qqs   diffusion coefficient for reflected light [0.,1.]
-/// \param[in] nncs   power coefficient for reflected light     (.GE.1)
+/// \param[in] nnqs   power coefficient for reflected light     (.GE.1)
 ///
 ///    Lightness model formula: Y = YD*QA + > YLi*(QD*cosNi+QS*cosRi)
 ///
diff --git a/hist/histv7/inc/ROOT/RAxis.hxx b/hist/histv7/inc/ROOT/RAxis.hxx
index 0371a06f97..52ed88b9d8 100644
--- a/hist/histv7/inc/ROOT/RAxis.hxx
+++ b/hist/histv7/inc/ROOT/RAxis.hxx
@@ -68,7 +68,7 @@ protected:
    /// determine the bin number taking into account how over/underflow
    /// should be handled.
    ///
-   /// \param[out] result status of the bin determination.
+   /// \param[in] rawbin for which to determine the bin number.
    /// \return Returns the bin number adjusted for potential over- and underflow
    /// bins. Returns `kInvalidBin` if the axis cannot handle the over- / underflow.
    ///
@@ -390,7 +390,7 @@ protected:
    /// Determine the inverse bin width.
    /// \param nbinsNoOver - number of bins without unter-/overflow
    /// \param lowOrHigh - first axis boundary
-   /// \param lighOrLow - second axis boundary
+   /// \param highOrLow - second axis boundary
    static double GetInvBinWidth(int nbinsNoOver, double lowOrHigh, double highOrLow)
    {
       return nbinsNoOver / std::fabs(highOrLow - lowOrHigh);
@@ -413,7 +413,7 @@ public:
 
    /// Initialize a RAxisEquidistant.
    /// \param[in] title - axis title used for graphics and text representation.
-   /// \param nbins - number of bins in the axis, excluding under- and overflow
+   /// \param nbinsNoOver - number of bins in the axis, excluding under- and overflow
    ///   bins.
    /// \param low - the low axis range. Any coordinate below that is considered
    ///   as underflow. The first bin's lower edge is at this value.
@@ -427,13 +427,12 @@ public:
    {}
 
    /// Initialize a RAxisEquidistant.
-   /// \param nbins - number of bins in the axis, excluding under- and overflow
+   /// \param nbinsNoOver - number of bins in the axis, excluding under- and overflow
    ///   bins.
    /// \param low - the low axis range. Any coordinate below that is considered
    ///   as underflow. The first bin's lower edge is at this value.
    /// \param high - the high axis range. Any coordinate above that is considered
    ///   as overflow. The last bin's higher edge is at this value.
-   /// \param canGrow - whether this axis can extend its range.
    explicit RAxisEquidistant(int nbinsNoOver, double low, double high) noexcept
       : RAxisEquidistant("", nbinsNoOver, low, high)
    {}
@@ -505,6 +504,7 @@ struct AxisConfigToType<RAxisConfig::kEquidistant> {
 class RAxisGrow: public RAxisEquidistant {
 public:
    /// Initialize a RAxisGrow.
+   /// \param[in] title - axis title used for graphics and text representation.
    /// \param nbins - number of bins in the axis, excluding under- and overflow
    ///   bins. This value is fixed over the lifetime of the object.
    /// \param low - the initial value for the low axis range. Any coordinate
@@ -518,7 +518,6 @@ public:
    {}
 
    /// Initialize a RAxisGrow.
-   /// \param[in] title - axis title used for graphics and text representation.
    /// \param nbins - number of bins in the axis, excluding under- and overflow
    ///   bins. This value is fixed over the lifetime of the object.
    /// \param low - the initial value for the low axis range. Any coordinate
diff --git a/hist/histv7/inc/ROOT/RHist.hxx b/hist/histv7/inc/ROOT/RHist.hxx
index 5567683b27..e2b7649975 100644
--- a/hist/histv7/inc/ROOT/RHist.hxx
+++ b/hist/histv7/inc/ROOT/RHist.hxx
@@ -219,9 +219,9 @@ struct RHistImplGen {
    ///
    /// Delegate to the appropriate MakeNextAxis instantiation, depending on the
    /// axis type selected in the RAxisConfig.
+   /// \param title - title of the derived object.
    /// \param axes - `RAxisConfig` objects describing the axis of the resulting
    ///   RHistImpl.
-   /// \param statConfig - the statConfig parameter to be passed to the RHistImpl
    /// \param processedAxisArgs - the RAxisBase-derived axis objects describing the
    ///   axes of the resulting RHistImpl. There are `IDIM` of those; in the end
    /// (`IDIM` == `GetNDim()`), all `axes` have been converted to
diff --git a/hist/unfold/src/TUnfoldBinning.cxx b/hist/unfold/src/TUnfoldBinning.cxx
index 3aecbf53c2..2500230dca 100644
--- a/hist/unfold/src/TUnfoldBinning.cxx
+++ b/hist/unfold/src/TUnfoldBinning.cxx
@@ -205,7 +205,7 @@ Int_t TUnfoldBinning::UpdateFirstLastBin(Bool_t startWithRootNode)
 /// Create a new node without axis.
 ///
 /// \param[in] name identifier of the node
-/// \param[in] nBin number of unconnected bins (could be zero)
+/// \param[in] nBins number of unconnected bins (could be zero)
 /// \param[in] binNames (optional) names of the bins separated by ';'
 
 TUnfoldBinning::TUnfoldBinning
@@ -241,7 +241,7 @@ TUnfoldBinning::TUnfoldBinning
 /// Add a new binning node as last last child of this node.
 ///
 /// \param[in] name name of the node
-/// \param[in] nBin number of extra bins
+/// \param[in] nBins number of extra bins
 /// \param[in] binNames (optional) names of the bins separated by ';'
 ///
 /// this is a shortcut for AddBinning(new TUnfoldBinning(name,nBins,binNames))
@@ -695,11 +695,11 @@ Int_t TUnfoldBinning::GetTH1xNumberOfBins
 ///
 /// \param[in] histogramName name of the histogram which is created
 /// \param[in] originalAxisBinning if true, try to preserve the axis binning
-/// \param[out] (default=0) binMap mapping of global bins to histogram bins.
+/// \param[out] binMap (default=0) mapping of global bins to histogram bins.
 /// if(binMap==0), no binMap is created
-/// \param[in] (default=0) histogramTitle title of the histogram. If zero, a title
+/// \param[in] histogramTitle (default=0) title of the histogram. If zero, a title
 /// is selected automatically
-/// \param[in] (default=0) axisSteering steer the handling of underflow/overflow
+/// \param[in] axisSteering (default=0) steer the handling of underflow/overflow
 /// and projections
 ///
 /// returns a new histogram (TH1D, TH2D or TH3D)
@@ -789,11 +789,11 @@ TH1 *TUnfoldBinning::CreateHistogram
 ///
 /// \param[in] histogramName name of the histogram which is created
 /// \param[in] originalAxisBinning if true, try to preserve the axis binning
-/// \param[out] (default=0) binMap mapping of global bins to histogram bins.
+/// \param[out] binMap (default=0) mapping of global bins to histogram bins.
 /// if(binMap==0), no binMap is created
-/// \param[in] (default=0) histogramTitle title of the histogram. If zero, a title
+/// \param[in] histogramTitle (default=0) title of the histogram. If zero, a title
 /// is selected automatically
-/// \param[in] (default=0) axisSteering steer the handling of underflow/overflow
+/// \param[in] axisSteering (default=0) steer the handling of underflow/overflow
 /// and projections
 ///
 /// returns a new TH2D. The options are described in greater detail
@@ -832,7 +832,7 @@ TH2D *TUnfoldBinning::CreateErrorMatrixHistogram
 /// Create a TH2D histogram capable to hold the bins of the two
 /// input binning schemes on the x and y axes, respectively.
 ///
-/// \paran[in] xAxis binning scheme for the x axis
+/// \param[in] xAxis binning scheme for the x axis
 /// \param[in] yAxis binning scheme for the y axis
 /// \param[in] histogramName name of the histogram which is created
 /// \param[in] originalXAxisBinning preserve x-axis bin widths if possible
@@ -1053,8 +1053,8 @@ Int_t *TUnfoldBinning::CreateEmptyBinMap(void) const {
 /// Set one entry in a bin map.
 ///
 /// \param[out] binMap to be used with TUnfoldSys::GetOutput() etc
-/// \param[in] source bin, global bin number in this binning scheme
-/// \param[in] destination bin in the output histogram
+/// \param[in] globalBin source bin, global bin number in this binning scheme
+/// \param[in] destBin destination bin in the output histogram
 
 void TUnfoldBinning::SetBinMapEntry
 (Int_t *binMap,Int_t globalBin,Int_t destBin) const {
@@ -2075,7 +2075,7 @@ Int_t TUnfoldBinning::ToGlobalBin
 /// and bin numbers on the corresponding axes.
 ///
 /// \param[in] globalBin global bin number
-/// \param[out] local bin numbers of the distribution's axes
+/// \param[out] axisBins local bin numbers of the distribution's axes
 ///
 /// returns the distribution in which the globalBin is located
 ///  or 0 if the globalBin is outside this node and its children
diff --git a/hist/unfold/src/TUnfoldBinningXML.cxx b/hist/unfold/src/TUnfoldBinningXML.cxx
index 28ce408128..a1daf58215 100644
--- a/hist/unfold/src/TUnfoldBinningXML.cxx
+++ b/hist/unfold/src/TUnfoldBinningXML.cxx
@@ -472,7 +472,7 @@ void TUnfoldBinningXML::AddAxisXML(TXMLNode *node) {
 /// Export a binning scheme to a stream in XML format.
 ///
 /// \param[in] binning the binning scheme to export
-/// \param[out] stream to write to
+/// \param[in] out stream to write to
 /// \param[in] writeHeader set true when writing the first binning
 /// scheme to this stream
 /// \param[in] writeFooter  set true when writing the last binning
diff --git a/hist/unfold/src/TUnfoldDensity.cxx b/hist/unfold/src/TUnfoldDensity.cxx
index 9b32da0961..78c7ddbf14 100644
--- a/hist/unfold/src/TUnfoldDensity.cxx
+++ b/hist/unfold/src/TUnfoldDensity.cxx
@@ -1311,7 +1311,7 @@ const TUnfoldBinning *TUnfoldDensity::GetOutputBinning
 /// \param[out] scanResult the scanned function wrt log(tau)
 /// \param[in] mode 1st parameter for the scan function
 /// \param[in] distribution 2nd parameter for the scan function
-/// \param[in] projectionMode 3rd parameter for the scan function
+/// \param[in] axisSteering 3rd parameter for the scan function
 /// \param[out] lCurvePlot for monitoring, shows the L-curve
 /// \param[out] logTauXPlot for monitoring, L-curve(X) as a function of log(tau)
 /// \param[out] logTauYPlot for monitoring, L-curve(Y) as a function of log(tau)
diff --git a/hist/unfold/src/TUnfoldSys.cxx b/hist/unfold/src/TUnfoldSys.cxx
index 42bbc7751c..1e89445cde 100644
--- a/hist/unfold/src/TUnfoldSys.cxx
+++ b/hist/unfold/src/TUnfoldSys.cxx
@@ -463,7 +463,7 @@ Int_t TUnfoldSys::SetInput(const TH1 *hist_y,Double_t scaleBias,
 /// \param[in] bgr background distribution with uncorrelated errors
 /// \param[in] name identifier for this background source
 /// \param[in] scale normalisation factor applied to the background
-/// \param[in] scaleError normalisation uncertainty
+/// \param[in] scale_error normalisation uncertainty
 ///
 /// The contribution <b>scale</b>*<b>bgr</b> is subtracted from the
 /// measurement prior to unfolding. The following contributions are
@@ -1045,7 +1045,6 @@ Bool_t TUnfoldSys::GetDeltaSysBackgroundScale
 /// Correlated one-sigma shifts from shifting tau.
 ///
 /// \param[out] hist_delta histogram to store shifts
-/// \param[in] source  identifier of the background source
 /// \param[in] binMap (default=0) remapping of histogram bins
 ///
 /// returns true if the background source was found.
@@ -1100,8 +1099,8 @@ void TUnfoldSys::GetEmatrixSysSource
 ////////////////////////////////////////////////////////////////////////////////
 /// Covariance contribution from background normalisation uncertainty.
 ///
-/// \param[inout] ematrix output histogram
-/// \param[in] source identifier of the background source
+/// \param[in,out] ematrix output histogram
+/// \param[in] name identifier of the background source
 /// \param[in] binMap (default=0) remapping of histogram bins
 /// \param[in] clearEmat (default=true) if true, clear the histogram
 /// prior to adding the covariance matrix contribution
diff --git a/io/io/inc/ROOT/TBufferMerger.hxx b/io/io/inc/ROOT/TBufferMerger.hxx
index 27fe36d399..5e4cfe52cb 100644
--- a/io/io/inc/ROOT/TBufferMerger.hxx
+++ b/io/io/inc/ROOT/TBufferMerger.hxx
@@ -43,7 +43,7 @@ public:
    /** Constructor
     * @param name Output file name
     * @param option Output file creation options
-    * @param compression Output file compression level
+    * @param compress Output file compression level
     */
    TBufferMerger(const char *name, Option_t *option = "RECREATE", Int_t compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);
 
diff --git a/math/mathcore/inc/Math/IntegratorMultiDim.h b/math/mathcore/inc/Math/IntegratorMultiDim.h
index 0d2d56396e..7b14f96d8e 100644
--- a/math/mathcore/inc/Math/IntegratorMultiDim.h
+++ b/math/mathcore/inc/Math/IntegratorMultiDim.h
@@ -60,7 +60,7 @@ public:
        @param type   integration type (adaptive, MC methods, etc..)
        @param absTol desired absolute Error
        @param relTol desired relative Error
-       @param size maximum number of sub-intervals
+       @param ncall  number of function calls (apply only to MC integratioon methods)
 
        In case no parameter  values are passed the default ones used in IntegratorMultiDimOptions are used
     */
diff --git a/math/minuit2/inc/Minuit2/FCNBase.h b/math/minuit2/inc/Minuit2/FCNBase.h
index bf6c64bd9e..760df5b6f4 100644
--- a/math/minuit2/inc/Minuit2/FCNBase.h
+++ b/math/minuit2/inc/Minuit2/FCNBase.h
@@ -65,7 +65,7 @@ public:
       as it searches for the Minimum or performs whatever analysis is requested by
       the user.
 
-      @param par function parameters as defined by the user.
+      @param v function parameters as defined by the user.
 
       @return the Value of the function.
 
@@ -75,7 +75,7 @@ public:
 
    */
 
-   virtual double operator()(const std::vector<double>& x) const = 0;
+   virtual double operator()(const std::vector<double>& v) const = 0;
 
 
    /**
diff --git a/math/minuit2/inc/Minuit2/FumiliChi2FCN.h b/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
index 6af985ef08..fac33baaf6 100644
--- a/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
+++ b/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
@@ -62,7 +62,7 @@ public:
 
   Sets the model function for the data (for example gaussian+linear for a peak)
 
-  @param modelFunction a reference to the model function.
+  @param modelFCN a reference to the model function.
 
   */
 
diff --git a/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h b/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
index 3eb5da9c36..4b620c57a8 100644
--- a/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
+++ b/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
@@ -67,7 +67,7 @@ public:
 
   @param fGradientCalculator the Gradient calculator used to retrieved the Parameter transformation
 
-  @param fFumiliFCNBase the function calculating the figure of merit.
+  @param lambda the Marquard lambda factor
 
 
   \todo Some nice latex mathematical formuli...
diff --git a/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h b/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
index c6725ae350..1661bee94a 100644
--- a/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
+++ b/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
@@ -61,7 +61,7 @@ public:
 
   Sets the model function for the data (for example gaussian+linear for a peak)
 
-  @param modelFunction a reference to the model function.
+  @param modelFCN a reference to the model function.
 
   */
 
diff --git a/roofit/roofit/src/RooExponential.cxx b/roofit/roofit/src/RooExponential.cxx
index dc211f5275..e16871c5eb 100644
--- a/roofit/roofit/src/RooExponential.cxx
+++ b/roofit/roofit/src/RooExponential.cxx
@@ -102,7 +102,7 @@ void compute(size_t n, double* __restrict output, Tx x, Tc c) {
 
 ////////////////////////////////////////////////////////////////////////////////
 /// Evaluate the exponential without normalising it on the given batch.
-/// \param[in] batchIndex Index of the batch to be computed.
+/// \param[in] begin Index of the batch to be computed.
 /// \param[in] batchSize Size of each batch. The last batch may be smaller.
 /// \return A span with the computed values.
 
diff --git a/roofit/roofit/src/RooGExpModel.cxx b/roofit/roofit/src/RooGExpModel.cxx
index 9c7f184b69..18f5688217 100644
--- a/roofit/roofit/src/RooGExpModel.cxx
+++ b/roofit/roofit/src/RooGExpModel.cxx
@@ -48,10 +48,10 @@ ClassImp(RooGExpModel);
 ///
 /// \param[in] name Name of this instance.
 /// \param[in] title Title (e.g. for plotting)
-/// \param[in] x The convolution observable.
-/// \param[in] mean The mean of the Gaussian.
-/// \param[in] sigma Width of the Gaussian.
-/// \param[in] rlife Lifetime constant \f$ \tau \f$.
+/// \param[in] xIn The convolution observable.
+/// \param[in] meanIn The mean of the Gaussian.
+/// \param[in] sigmaIn Width of the Gaussian.
+/// \param[in] rlifeIn Lifetime constant \f$ \tau \f$.
 /// \param[in] meanSF  Scale factor for mean.
 /// \param[in] sigmaSF Scale factor for sigma.
 /// \param[in] rlifeSF Scale factor for rlife.
@@ -81,9 +81,9 @@ RooGExpModel::RooGExpModel(const char *name, const char *title, RooAbsRealLValue
 ///
 /// \param[in] name Name of this instance.
 /// \param[in] title Title (e.g. for plotting)
-/// \param[in] x The convolution observable.
-/// \param[in] sigma Width of the Gaussian.
-/// \param[in] rlife Lifetime constant \f$ \tau \f$.
+/// \param[in] xIn The convolution observable.
+/// \param[in] _sigma Width of the Gaussian.
+/// \param[in] _rlife Lifetime constant \f$ \tau \f$.
 /// \param[in] nlo   Include next-to-leading order for higher accuracy of convolution.
 /// \param[in] type  Switch between normal and flipped model.
 RooGExpModel::RooGExpModel(const char *name, const char *title, RooAbsRealLValue& xIn,
@@ -105,10 +105,10 @@ RooGExpModel::RooGExpModel(const char *name, const char *title, RooAbsRealLValue
 ///
 /// \param[in] name Name of this instance.
 /// \param[in] title Title (e.g. for plotting)
-/// \param[in] x The convolution observable.
-/// \param[in] sigma Width of the Gaussian.
-/// \param[in] rlife Lifetime constant \f$ \tau \f$.
-/// \param[in] srSF Scale factor for both sigma and tau.
+/// \param[in] xIn The convolution observable.
+/// \param[in] _sigma Width of the Gaussian.
+/// \param[in] _rlife Lifetime constant \f$ \tau \f$.
+/// \param[in] _rsSF Scale factor for both sigma and tau.
 /// \param[in] nlo   Include next-to-leading order for higher accuracy of convolution.
 /// \param[in] type  Switch between normal and flipped model.
 RooGExpModel::RooGExpModel(const char *name, const char *title, RooAbsRealLValue& xIn,
@@ -134,11 +134,11 @@ RooGExpModel::RooGExpModel(const char *name, const char *title, RooAbsRealLValue
 ///
 /// \param[in] name Name of this instance.
 /// \param[in] title Title (e.g. for plotting)
-/// \param[in] x The convolution observable.
-/// \param[in] sigma Width of the Gaussian.
-/// \param[in] rlife Lifetime constant \f$ \tau \f$.
-/// \param[in] sigmaSF Scale factor for sigma.
-/// \param[in] rlifeSF Scale factor for rlife.
+/// \param[in] xIn The convolution observable.
+/// \param[in] _sigma Width of the Gaussian.
+/// \param[in] _rlife Lifetime constant \f$ \tau \f$.
+/// \param[in] _sigmaSF Scale factor for sigma.
+/// \param[in] _rlifeSF Scale factor for rlife.
 /// \param[in] nlo   Include next-to-leading order for higher accuracy of convolution.
 /// \param[in] type  Switch between normal and flipped model.
 RooGExpModel::RooGExpModel(const char *name, const char *title, RooAbsRealLValue& xIn,
diff --git a/roofit/roofit/src/RooGaussian.cxx b/roofit/roofit/src/RooGaussian.cxx
index 9d18be7354..aec93528ba 100644
--- a/roofit/roofit/src/RooGaussian.cxx
+++ b/roofit/roofit/src/RooGaussian.cxx
@@ -92,7 +92,7 @@ void compute(RooSpan<double> output, Tx x, TMean mean, TSig sigma) {
 /// and if found, the computation will be batched over their
 /// values. If batch data are not found for one of the proxies, the proxies value is assumed to
 /// be constant over the batch.
-/// \param[in] batchIndex Index of the batch to be computed.
+/// \param[in] begin Index of the batch to be computed.
 /// \param[in] batchSize Size of each batch. The last batch may be smaller.
 /// \return A span with the computed values.
 
diff --git a/roofit/roofit/src/RooJohnson.cxx b/roofit/roofit/src/RooJohnson.cxx
index ba6686f698..1dd6de96b2 100644
--- a/roofit/roofit/src/RooJohnson.cxx
+++ b/roofit/roofit/src/RooJohnson.cxx
@@ -153,7 +153,7 @@ void compute(RooSpan<double> output, TMass mass, TMu mu, TLambda lambda, TGamma
 /// and if found, the computation will be batched over their
 /// values. If batch data are not found for one of the proxies, the proxies value is assumed to
 /// be constant over the batch.
-/// \param[in] batchIndex Index of the batch to be computed.
+/// \param[in] begin Index of the batch to be computed.
 /// \param[in] maxSize Maximal size of the batches. May return smaller batches depending on inputs.
 /// \return A span with the computed values.
 
diff --git a/roofit/roofit/src/RooLandau.cxx b/roofit/roofit/src/RooLandau.cxx
index e59a923cf0..2dade45b3a 100644
--- a/roofit/roofit/src/RooLandau.cxx
+++ b/roofit/roofit/src/RooLandau.cxx
@@ -169,7 +169,7 @@ void compute(	size_t batchSize,
 /// and if found, the computation will be batched over their
 /// values. If batch data are not found for one of the proxies, the proxies value is assumed to
 /// be constant over the batch.
-/// \param[in] batchIndex Index of the batch to be computed.
+/// \param[in] begin Index of the batch to be computed.
 /// \param[in] batchSize Size of each batch. The last batch may be smaller.
 /// \return A span with the computed values.
 
diff --git a/roofit/roofitcore/src/BatchData.cxx b/roofit/roofitcore/src/BatchData.cxx
index fd05343076..5bbe34e20b 100644
--- a/roofit/roofitcore/src/BatchData.cxx
+++ b/roofit/roofitcore/src/BatchData.cxx
@@ -73,7 +73,7 @@ bool BatchData::setStatus(std::size_t begin, std::size_t size, Status_t stat,
 /// Retrieve an existing batch.
 ///
 /// \param[in] begin Begin index of the batch.
-/// \param[in] size  Requested size. Batch may come out smaller than this.
+/// \param[in] maxSize  Requested size. Batch may come out smaller than this.
 /// \param[in] normSet Optional normSet pointer to distinguish differently normalised computations.
 /// \param[in] ownerTag Optional owner tag. This avoids reusing batch memory for e.g. getVal() and getLogVal().
 /// \return Non-mutable contiguous batch data.
diff --git a/roofit/roofitcore/src/RooAbsPdf.cxx b/roofit/roofitcore/src/RooAbsPdf.cxx
index 9f68b1cdb7..9e7eb69e09 100644
--- a/roofit/roofitcore/src/RooAbsPdf.cxx
+++ b/roofit/roofitcore/src/RooAbsPdf.cxx
@@ -711,7 +711,7 @@ bool checkInfNaNNeg(const T& inputs) {
 
 ////////////////////////////////////////////////////////////////////////////////
 /// Scan through outputs and fix+log all nans and negative values.
-/// \param[in/out] outputs Array to be scanned & fixed.
+/// \param[in,out] outputs Array to be scanned & fixed.
 /// \param[in] begin Begin of event range. Only needed to print the correct event number
 /// where the error occurred.
 void RooAbsPdf::logBatchComputationErrors(RooSpan<const double>& outputs, std::size_t begin) const {
@@ -734,7 +734,7 @@ void RooAbsPdf::logBatchComputationErrors(RooSpan<const double>& outputs, std::s
 /// Compute the log-likelihoods for all events in the requested batch.
 /// The arguments are passed over to getValBatch().
 /// \param[in] begin Start of the batch.
-/// \param[in] size  Maximum size of the batch. Depending on data layout and memory, the batch
+/// \param[in] maxSize  Maximum size of the batch. Depending on data layout and memory, the batch
 /// may come back smaller.
 /// \return    Returns a batch of doubles that contains the log probabilities.
 RooSpan<const double> RooAbsPdf::getLogValBatch(std::size_t begin, std::size_t maxSize,
diff --git a/roofit/roofitcore/src/RooAbsReal.cxx b/roofit/roofitcore/src/RooAbsReal.cxx
index 2d2ceeaf2d..6cac5f5897 100644
--- a/roofit/roofitcore/src/RooAbsReal.cxx
+++ b/roofit/roofitcore/src/RooAbsReal.cxx
@@ -4294,7 +4294,7 @@ RooAbsMoment* RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, B
 /// \param[in] order Order of the moment
 /// \param[in] central If true, the central moment is given by \f$ \langle (x- \langle x \rangle )^2 \rangle \f$
 /// \param[in] takeRoot Calculate the square root
-/// \param[in] intNormOb If true, the moment of the function integrated over all normalization observables is returned.
+/// \param[in] intNormObs If true, the moment of the function integrated over all normalization observables is returned.
 
 RooAbsMoment* RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs)
 {
diff --git a/roofit/roofitcore/src/RooCustomizer.cxx b/roofit/roofitcore/src/RooCustomizer.cxx
index 97d6d3176c..818991873d 100644
--- a/roofit/roofitcore/src/RooCustomizer.cxx
+++ b/roofit/roofitcore/src/RooCustomizer.cxx
@@ -198,7 +198,7 @@ static Int_t init()
 /// replaceArg() and splitArg() functionality.
 /// \param[in] pdf Proto PDF to be customised.
 /// \param[in] masterCat Category to be used for splitting.
-/// \param[in/out] splitLeafs All nodes created in
+/// \param[in,out] splitLeafs All nodes created in
 /// the customisation process are added to this set.
 /// The user can provide nodes that are *taken*
 /// from the set if they have a name that matches `<parameterNameToBeReplaced>_<category>`.
@@ -209,7 +209,7 @@ static Int_t init()
 ///  auto yield1 = new RooFormulaVar("yieldSig_BBG1m2T","sigy1","M/3.360779",mass);
 ///  customisedLeafs.addOwned(*yield1);
 /// ```
-/// \param[in/out] splitLeafsAll All leafs that are used when customising are collected here.
+/// \param[in,out] splitLeafsAll All leafs that are used when customising are collected here.
 /// If this set already contains leaves, they will be used for customising if the names match
 /// as above.
 /// 
diff --git a/roofit/roofitcore/src/RooDataHist.cxx b/roofit/roofitcore/src/RooDataHist.cxx
index 1c8b517b0d..8c90dd0ade 100644
--- a/roofit/roofitcore/src/RooDataHist.cxx
+++ b/roofit/roofitcore/src/RooDataHist.cxx
@@ -632,8 +632,8 @@ void RooDataHist::_adjustBinning(RooRealVar &theirVar, const TAxis &axis,
 /// observable to binning in given reference TH1. Used by constructors
 /// that import data from an external TH1.
 /// Both the variables in vars and in this RooDataHist are adjusted.
-/// @param List with variables that are supposed to have their binning adjusted.
-/// @param Reference histogram that dictates the binning
+/// @param vars List with variables that are supposed to have their binning adjusted.
+/// @param href Reference histogram that dictates the binning
 /// @param offset If not nullptr, a possible bin count offset for the axes x,y,z is saved here as Int_t[3]
 
 void RooDataHist::adjustBinning(const RooArgList& vars, const TH1& href, Int_t* offset)
diff --git a/roofit/roofitcore/src/RooDataSet.cxx b/roofit/roofitcore/src/RooDataSet.cxx
index 1e54dfbde0..f03ec78a0d 100644
--- a/roofit/roofitcore/src/RooDataSet.cxx
+++ b/roofit/roofitcore/src/RooDataSet.cxx
@@ -765,7 +765,7 @@ RooDataSet::RooDataSet(const char *name, const char *title, TTree *theTree,
 ///
 /// \param[in] name Name of this dataset.
 /// \param[in] title Title for e.g. plotting.
-/// \param[in] tree Tree to be imported.
+/// \param[in] theTree Tree to be imported.
 /// \param[in] vars Defines the columns of the data set. For each dimension
 /// specified, the TTree must have a branch with the same name. For category
 /// branches, this branch should contain the numeric index value. Real dimensions
@@ -1205,11 +1205,11 @@ void RooDataSet::add(const RooArgSet& data, Double_t wgt, Double_t wgtError)
 ////////////////////////////////////////////////////////////////////////////////
 /// Add a data point, with its coordinates specified in the 'data' argset, to the data set. 
 /// Any variables present in 'data' but not in the dataset will be silently ignored.
-/// \param[in] data Data point.
-/// \param[in] wgt Event weight. The current value of the weight variable is ignored.
+/// \param[in] indata Data point.
+/// \param[in] inweight Event weight. The current value of the weight variable is ignored.
 /// \note To obtain weighted events, a variable must be designated `WeightVar` in the constructor.
-/// \param[in] wgtErrorLo Asymmetric weight error.
-/// \param[in] wgtErrorHi Asymmetric weight error.
+/// \param[in] weightErrorLo Asymmetric weight error.
+/// \param[in] weightErrorHi Asymmetric weight error.
 /// \note This requires including the weight variable in the set of `StoreAsymError` variables when constructing
 /// the dataset.
 
diff --git a/roofit/roofitcore/src/RooFormulaVar.cxx b/roofit/roofitcore/src/RooFormulaVar.cxx
index 90ee32d619..947c505598 100644
--- a/roofit/roofitcore/src/RooFormulaVar.cxx
+++ b/roofit/roofitcore/src/RooFormulaVar.cxx
@@ -66,7 +66,7 @@ ClassImp(RooFormulaVar);
 /// Constructor with formula expression and list of input variables.
 /// \param[in] name Name of the formula.
 /// \param[in] title Title of the formula.
-/// \param[in] formula Expression to be evaluated.
+/// \param[in] inFormula Expression to be evaluated.
 /// \param[in] dependents Variables that should be passed to the formula.
 /// \param[in] checkVariables Check that all variables from `dependents` are used in the expression.
 RooFormulaVar::RooFormulaVar(const char *name, const char *title, const char* inFormula, const RooArgList& dependents,
diff --git a/roofit/roofitcore/src/RooSuperCategory.cxx b/roofit/roofitcore/src/RooSuperCategory.cxx
index 4c0b705e50..e5668ffb98 100644
--- a/roofit/roofitcore/src/RooSuperCategory.cxx
+++ b/roofit/roofitcore/src/RooSuperCategory.cxx
@@ -54,7 +54,7 @@ RooSuperCategory::RooSuperCategory() :
 /// Construct a super category from other categories.
 /// \param[in] name Name of this object
 /// \param[in] title Title (for e.g. printing)
-/// \param[in] inputCatList RooArgSet with category objects. These all need to derive from RooAbsCategoryLValue, *i.e.*
+/// \param[in] inputCategories RooArgSet with category objects. These all need to derive from RooAbsCategoryLValue, *i.e.*
 /// one needs to be able to assign to them.
 RooSuperCategory::RooSuperCategory(const char *name, const char *title, const RooArgSet& inputCategories) :
   RooAbsCategoryLValue(name, title),
diff --git a/roofit/roofitmore/src/RooHypatia2.cxx b/roofit/roofitmore/src/RooHypatia2.cxx
index 691aa6073d..7d550b2753 100644
--- a/roofit/roofitmore/src/RooHypatia2.cxx
+++ b/roofit/roofitmore/src/RooHypatia2.cxx
@@ -119,21 +119,21 @@
 /// \param[in] a2 Start of right tail.
 /// \param[in] n2 Shape parameter of right tail (\f$ n2 \ge 0 \f$). With \f$ n2 = 0 \f$, the function is constant.
 RooHypatia2::RooHypatia2(const char *name, const char *title, RooAbsReal& x, RooAbsReal& lambda,
-    RooAbsReal& zeta, RooAbsReal& beta, RooAbsReal& sigm, RooAbsReal& mu, RooAbsReal& a,
+    RooAbsReal& zeta, RooAbsReal& beta, RooAbsReal& sigma, RooAbsReal& mu, RooAbsReal& a,
     RooAbsReal& n, RooAbsReal& a2, RooAbsReal& n2) :
                 RooAbsPdf(name, title),
                 _x("x", "x", this, x),
                 _lambda("lambda", "Lambda", this, lambda),
                 _zeta("zeta", "zeta", this, zeta),
                 _beta("beta", "Asymmetry parameter beta", this, beta),
-                _sigma("sigma", "Width parameter sigma", this, sigm),
+                _sigma("sigma", "Width parameter sigma", this, sigma),
                 _mu("mu", "Location parameter mu", this, mu),
                 _a("a", "Left tail location a", this, a),
                 _n("n", "Left tail parameter n", this, n),
                 _a2("a2", "Right tail location a2", this, a2),
                 _n2("n2", "Right tail parameter n2", this, n2)
 {
-  RooHelpers::checkRangeOfParameters(this, {&sigm}, 0.);
+  RooHelpers::checkRangeOfParameters(this, {&sigma}, 0.);
   RooHelpers::checkRangeOfParameters(this, {&zeta, &n, &n2, &a, &a2}, 0., std::numeric_limits<double>::max(), true);
   if (zeta.getVal() == 0. && zeta.isConstant()) {
     RooHelpers::checkRangeOfParameters(this, {&lambda}, -std::numeric_limits<double>::max(), 0., false,
diff --git a/tmva/tmva/inc/TMVA/BDTEventWrapper.h b/tmva/tmva/inc/TMVA/BDTEventWrapper.h
index 7d4c4f8dd6..2c99341dd9 100644
--- a/tmva/tmva/inc/TMVA/BDTEventWrapper.h
+++ b/tmva/tmva/inc/TMVA/BDTEventWrapper.h
@@ -40,14 +40,14 @@ namespace TMVA {
 
       // Set the accumulated weight, for sorted signal/background events
       /**
-       * @param fType - true for signal, false for background
+       * @param type - true for signal, false for background
        * @param weight - the total weight
        */
       void SetCumulativeWeight( Bool_t type, Double_t weight );
 
       // Get the accumulated weight
       /**
-       * @param fType - true for signal, false for background
+       * @param type - true for signal, false for background
        * @return the cumulative weight for sorted signal/background events
        */
       Double_t GetCumulativeWeight( Bool_t type ) const;
diff --git a/tmva/tmva/inc/TMVA/NeuralNet.h b/tmva/tmva/inc/TMVA/NeuralNet.h
index bae98a48b2..a11b543b59 100644
--- a/tmva/tmva/inc/TMVA/NeuralNet.h
+++ b/tmva/tmva/inc/TMVA/NeuralNet.h
@@ -478,10 +478,8 @@ namespace TMVA
           * \param size size of the layer
           * \param itWeightBegin indicates the start of the weights for this layer on the weight vector
           * \param itGradientBegin indicates the start of the gradients for this layer on the gradient vector
-          * \param itFunctionBegin indicates the start of the vector of activation functions for this layer on the 
-          *                        activation function vector
-          * \param itInverseFunctionBegin indicates the start of the vector of activation functions for this 
-          *                               layer on the activation function vector
+          * \param activationFunction indicates activation functions for this layer
+          * \param inverseActivationFunction indicates the inverse activation functions for this layer
           * \param eModeOutput indicates a potential tranformation of the output values before further computation
           *                    DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each
           *                    output value (to create a probability); SOFTMAX applies a softmax transformation to all 
@@ -500,8 +498,7 @@ namespace TMVA
           * 
           * \param size size of the layer
           * \param itWeightBegin indicates the start of the weights for this layer on the weight vector
-          * \param itFunctionBegin indicates the start of the vector of activation functions for this layer on the 
-          *                        activation function vector
+          * \param activationFunction indicates the activation function for this layer
           * \param eModeOutput indicates a potential tranformation of the output values before further computation
           *                    DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each
           *                    output value (to create a probability); SOFTMAX applies a softmax transformation to all 
@@ -679,9 +676,6 @@ namespace TMVA
          /*! \brief c'tor for defining a Layer
           *
           * 
-          * \param itInputBegin indicates the start of the input node vector
-          * \param itInputEnd indicates the end of the input node vector
-          *
           */
          Layer (size_t numNodes, EnumFunction activationFunction, ModeOutputValues eModeOutputValues = ModeOutputValues::DIRECT);
 
@@ -1141,7 +1135,7 @@ namespace TMVA
     
          /*! \brief executes one training cycle
           *
-          * \param minimizier the minimizer to be used
+          * \param minimizer the minimizer to be used
           * \param weights the weight vector to be used
           * \param itPatternBegin the pattern to be trained with
           * \param itPatternEnd the pattern to be trainied with
diff --git a/tmva/tmva/inc/TMVA/NeuralNet.icc b/tmva/tmva/inc/TMVA/NeuralNet.icc
index 95cad21e26..e511e49d43 100644
--- a/tmva/tmva/inc/TMVA/NeuralNet.icc
+++ b/tmva/tmva/inc/TMVA/NeuralNet.icc
@@ -933,7 +933,7 @@ template <typename LAYERDATA>
  * \param minimizer the minimizer to be used (e.g. SGD)
  * \param weights the weight container with all the synapse weights
  * \param itPatternBegin begin of the pattern container
- * \parama itPatternEnd the end of the pattern container
+ * \param itPatternEnd the end of the pattern container
  * \param settings the settings for this training (e.g. multithreading or not, regularization, etc.)
  * \param dropContainer the data for dropping-out nodes (regularization technique)
  */
diff --git a/tmva/tmva/inc/TMVA/RTensor.hxx b/tmva/tmva/inc/TMVA/RTensor.hxx
index c131384ae2..7d9773b457 100644
--- a/tmva/tmva/inc/TMVA/RTensor.hxx
+++ b/tmva/tmva/inc/TMVA/RTensor.hxx
@@ -73,7 +73,7 @@ inline std::vector<std::size_t> ComputeStridesFromShape(const T &shape, MemoryLa
 }
 
 /// \brief Compute indices from global index
-/// \param[in] Shape vector
+/// \param[in] shape Shape vector
 /// \param[in] idx Global index
 /// \param[in] layout Memory layout
 /// \return Indice vector
diff --git a/tmva/tmva/inc/TMVA/TreeInference/BranchlessTree.hxx b/tmva/tmva/inc/TMVA/TreeInference/BranchlessTree.hxx
index 4ac460be64..a1c6fdf773 100644
--- a/tmva/tmva/inc/TMVA/TreeInference/BranchlessTree.hxx
+++ b/tmva/tmva/inc/TMVA/TreeInference/BranchlessTree.hxx
@@ -72,7 +72,7 @@ struct BranchlessTree {
 /// Perform inference on a single input vector
 /// \param[in] input Pointer to data containing the input values
 /// \param[in] stride Stride to go from one input variable to the next one
-/// \param[out] Tree score, result of the inference
+/// \return Tree score, result of the inference
 template <typename T>
 inline T BranchlessTree<T>::Inference(const T *input, const int stride)
 {
@@ -105,7 +105,7 @@ inline void BranchlessTree<T>::FillSparse()
 ///
 /// \param[in] funcName Name of the function
 /// \param[in] typeName Name of the type used for the computation
-/// \param[out] Code of the inference function as string
+/// \return Code of the inference function as string
 template <typename T>
 inline std::string BranchlessTree<T>::GetInferenceCode(const std::string& funcName, const std::string& typeName)
 {
diff --git a/tmva/tmva/inc/TMVA/TreeInference/Forest.hxx b/tmva/tmva/inc/TMVA/TreeInference/Forest.hxx
index 70d1e3eb68..18b385a8e0 100644
--- a/tmva/tmva/inc/TMVA/TreeInference/Forest.hxx
+++ b/tmva/tmva/inc/TMVA/TreeInference/Forest.hxx
@@ -195,7 +195,7 @@ struct BranchlessJittedForest : public ForestBase<T, std::function<void (const T
 /// \param[in] filename Filename of the ROOT file
 /// \param[in] output Load trees corresponding to the given output node of the forest
 /// \param[in] sortTrees Flag to indicate sorting the input trees by the cut value of the first node of each tree
-/// \param[out] Return jitted code as string
+/// \return Return jitted code as string
 template <typename T>
 inline std::string
 BranchlessJittedForest<T>::Load(const std::string &key, const std::string &filename, const int output, const bool sortTrees)
diff --git a/tmva/tmva/src/BDTEventWrapper.cxx b/tmva/tmva/src/BDTEventWrapper.cxx
index 63171c886b..9702660936 100644
--- a/tmva/tmva/src/BDTEventWrapper.cxx
+++ b/tmva/tmva/src/BDTEventWrapper.cxx
@@ -48,7 +48,7 @@ BDTEventWrapper::~BDTEventWrapper() {
 ////////////////////////////////////////////////////////////////////////////////
 /// Set the accumulated weight, for sorted signal/background events
 ///
-/// @param fType - true for signal, false for background
+/// @param type - true for signal, false for background
 /// @param weight - the total weight
 
 void BDTEventWrapper::SetCumulativeWeight(Bool_t type, Double_t weight) {
diff --git a/tmva/tmva/src/CrossValidation.cxx b/tmva/tmva/src/CrossValidation.cxx
index 453927c5b7..58bd9130d1 100644
--- a/tmva/tmva/src/CrossValidation.cxx
+++ b/tmva/tmva/src/CrossValidation.cxx
@@ -99,7 +99,7 @@ TMultiGraph *TMVA::CrossValidationResult::GetROCCurves(Bool_t /*fLegend*/)
 ///
 /// \note You own the returned pointer.
 ///
-/// \param numSamples[in] Number of samples used for generating the average ROC
+/// \param[in] numSamples Number of samples used for generating the average ROC
 ///                       Curve. Avg. curve will be evaluated only at these
 ///                       points (using interpolation if necessary).
 ///
diff --git a/tmva/tmva/src/CvSplit.cxx b/tmva/tmva/src/CvSplit.cxx
index d6d44ac1cc..9eedcf3d72 100644
--- a/tmva/tmva/src/CvSplit.cxx
+++ b/tmva/tmva/src/CvSplit.cxx
@@ -227,15 +227,15 @@ UInt_t TMVA::CvSplitKFoldsExpr::GetSpectatorIndexForName(DataSetInfo &dsi, TStri
 
 ////////////////////////////////////////////////////////////////////////////////
 /// \brief Splits a dataset into k folds, ready for use in cross validation.
-/// \param numFolds[in] Number of folds to split data into
-/// \param stratified[in] If true, use stratified splitting, balancing the
+/// \param[in] numFolds Number of folds to split data into
+/// \param[in] stratified If true, use stratified splitting, balancing the
 ///                       number of events across classes and folds. If false,
 ///                       no such balancing is done. For
-/// \param splitExpr[in] Expression used to split data into folds. If `""` a
+/// \param[in] splitExpr Expression used to split data into folds. If `""` a
 ///                      random assignment will be done. Otherwise the
 ///                      expression is fed into a TFormula and evaluated per
 ///                      event. The resulting value is the the fold assignment.
-/// \param seed[in] Used only when using random splitting (i.e. when
+/// \param[in] seed Used only when using random splitting (i.e. when
 ///                 `splitExpr` is `""`). Seed is used to initialise the random
 ///                 number generator when assigning events to folds.
 ///
@@ -282,9 +282,9 @@ void TMVA::CvSplitKFolds::MakeKFoldDataSet(DataSetInfo &dsi)
 
 ////////////////////////////////////////////////////////////////////////////////
 /// \brief Generates a vector of fold assignments
-/// \param nEntires[in] Number of events in range
-/// \param numFolds[in] Number of folds to split data into
-/// \param seed[in] Random seed
+/// \param[in] nEntries Number of events in range
+/// \param[in] numFolds Number of folds to split data into
+/// \param[in] seed Random seed
 ///
 /// Randomly assigns events to `numFolds` folds. Each fold will hold at most
 /// `nEntries / numFolds + 1` events.
@@ -311,8 +311,8 @@ std::vector<UInt_t> TMVA::CvSplitKFolds::GetEventIndexToFoldMapping(UInt_t nEntr
 
 ////////////////////////////////////////////////////////////////////////////////
 /// \brief Split sets for into k-folds
-/// \param oldSet[in] Original, unsplit, events
-/// \param numFolds[in] Number of folds to split data into
+/// \param[in] oldSet Original, unsplit, events
+/// \param[in] numFolds Number of folds to split data into
 ///
 
 std::vector<std::vector<TMVA::Event *>>
diff --git a/tmva/tmva/src/Envelope.cxx b/tmva/tmva/src/Envelope.cxx
index 5fab98c13b..8a0c6b23f4 100644
--- a/tmva/tmva/src/Envelope.cxx
+++ b/tmva/tmva/src/Envelope.cxx
@@ -37,8 +37,8 @@ this is a generic one protected.
 \param file optional file to save the results.
 \param options extra options for the algorithm.
 */
-Envelope::Envelope(const TString &name, DataLoader *dalaloader, TFile *file, const TString options)
-   : Configurable(options), fDataLoader(dalaloader), fFile(file), fModelPersistence(kTRUE), fVerbose(kFALSE),
+Envelope::Envelope(const TString &name, DataLoader *dataloader, TFile *file, const TString options)
+   : Configurable(options), fDataLoader(dataloader), fFile(file), fModelPersistence(kTRUE), fVerbose(kFALSE),
      fTransformations("I"), fSilentFile(kFALSE), fJobs(1)
 {
     SetName(name.Data());
@@ -120,7 +120,7 @@ DataLoader *Envelope::GetDataLoader(){    return fDataLoader.get();}
 //_______________________________________________________________________
 /**
 Method to set the pointer to TMVA::DataLoader object.
-\param dalaloader pointer to TMVA::DataLoader object.
+\param dataloader pointer to TMVA::DataLoader object.
 */
 
 void Envelope::SetDataLoader(DataLoader *dataloader)
@@ -146,7 +146,7 @@ void TMVA::Envelope::SetModelPersistence(Bool_t status){fModelPersistence=status
 /**
 Method to book the machine learning method to perform the algorithm.
 \param method enum TMVA::Types::EMVA with the type of the mva method
-\param methodtitle String with the method title.
+\param methodTitle String with the method title.
 \param options String with the options for the method.
 */
 void TMVA::Envelope::BookMethod(Types::EMVA method, TString methodTitle, TString options){
@@ -156,8 +156,8 @@ void TMVA::Envelope::BookMethod(Types::EMVA method, TString methodTitle, TString
 //_______________________________________________________________________
 /**
 Method to book the machine learning method to perform the algorithm.
-\param methodname String with the name of the mva method
-\param methodtitle String with the method title.
+\param methodName String with the name of the mva method
+\param methodTitle String with the method title.
 \param options String with the options for the method.
 */
 void TMVA::Envelope::BookMethod(TString methodName, TString methodTitle, TString options){
diff --git a/tree/dataframe/inc/ROOT/RDF/RInterface.hxx b/tree/dataframe/inc/ROOT/RDF/RInterface.hxx
index b5e39251a8..da09c0be3c 100644
--- a/tree/dataframe/inc/ROOT/RDF/RInterface.hxx
+++ b/tree/dataframe/inc/ROOT/RDF/RInterface.hxx
@@ -568,7 +568,7 @@ public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Save selected columns in memory
    /// \tparam ColumnTypes variadic list of branch/column types.
-   /// \param[in] columns to be cached in memory.
+   /// \param[in] columnList columns to be cached in memory.
    /// \return a `RDataFrame` that wraps the cached dataset.
    ///
    /// This action returns a new `RDataFrame` object, completely detached from
@@ -603,7 +603,7 @@ public:
 
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Save selected columns in memory
-   /// \param[in] columns to be cached in memory
+   /// \param[in] columnList columns to be cached in memory
    /// \return a `RDataFrame` that wraps the cached dataset.
    ///
    /// See the previous overloads for more information.
@@ -660,7 +660,7 @@ public:
 
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Save selected columns in memory
-   /// \param[in] columns to be cached in memory.
+   /// \param[in] columnList columns to be cached in memory.
    /// \return a `RDataFrame` that wraps the cached dataset.
    ///
    /// See the previous overloads for more information.
@@ -1528,13 +1528,13 @@ public:
    /// ~~~
    ///
    template <typename T>
-   RResultPtr<T> Fill(T &&model, const ColumnNames_t &bl)
+   RResultPtr<T> Fill(T &&model, const ColumnNames_t &columnList)
    {
       auto h = std::make_shared<T>(std::forward<T>(model));
       if (!RDFInternal::HistoUtils<T>::HasAxisLimits(*h)) {
          throw std::runtime_error("The absence of axes limits is not supported yet.");
       }
-      return CreateAction<RDFInternal::ActionTags::Fill, RDFDetail::RInferredType>(bl, h, bl.size());
+      return CreateAction<RDFInternal::ActionTags::Fill, RDFDetail::RInferredType>(columnList, h, columnList.size());
    }
 
    ////////////////////////////////////////////////////////////////////////////
@@ -2134,7 +2134,7 @@ public:
    /// \brief Provides a representation of the columns in the dataset
    /// \tparam ColumnTypes variadic list of branch/column types.
    /// \param[in] columnList Names of the columns to be displayed.
-   /// \param[in] rows Number of events for each column to be displayed.
+   /// \param[in] nRows Number of events for each column to be displayed.
    /// \return the `RDisplay` instance wrapped in a `RResultPtr`.
    ///
    /// This function returns a `RResultPtr<RDisplay>` containing all the entries to be displayed, organized in a tabular
@@ -2165,7 +2165,7 @@ public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Provides a representation of the columns in the dataset
    /// \param[in] columnList Names of the columns to be displayed.
-   /// \param[in] rows Number of events for each column to be displayed.
+   /// \param[in] nRows Number of events for each column to be displayed.
    /// \return the `RDisplay` instance wrapped in a `RResultPtr`.
    ///
    /// This overload automatically infers the column types.
@@ -2181,7 +2181,7 @@ public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Provides a representation of the columns in the dataset
    /// \param[in] columnNameRegexp A regular expression to select the columns.
-   /// \param[in] rows Number of events for each column to be displayed.
+   /// \param[in] nRows Number of events for each column to be displayed.
    /// \return the `RDisplay` instance wrapped in a `RResultPtr`.
    ///
    /// The existing columns are matched against the regular expression. If the string provided
diff --git a/tree/dataframe/inc/ROOT/RDFHelpers.hxx b/tree/dataframe/inc/ROOT/RDFHelpers.hxx
index 2193e1772e..63a0f90cab 100644
--- a/tree/dataframe/inc/ROOT/RDFHelpers.hxx
+++ b/tree/dataframe/inc/ROOT/RDFHelpers.hxx
@@ -138,7 +138,7 @@ void SaveGraph(NodeType node, const std::string &outputFile)
 
 // clang-format off
 /// Cast a RDataFrame node to the common type ROOT::RDF::RNode
-/// \param[in] Any node of a RDataFrame graph
+/// \param[in] node Any node of a RDataFrame graph
 // clang-format on
 template <typename NodeType>
 RNode AsRNode(NodeType node)
diff --git a/tree/dataframe/inc/ROOT/RDataSource.hxx b/tree/dataframe/inc/ROOT/RDataSource.hxx
index f4af9abded..04f7dc850c 100644
--- a/tree/dataframe/inc/ROOT/RDataSource.hxx
+++ b/tree/dataframe/inc/ROOT/RDataSource.hxx
@@ -126,14 +126,14 @@ public:
    virtual const std::vector<std::string> &GetColumnNames() const = 0;
 
    /// \brief Checks if the dataset has a certain column
-   /// \param[in] columnName The name of the column
-   virtual bool HasColumn(std::string_view) const = 0;
+   /// \param[in] colName The name of the column
+   virtual bool HasColumn(std::string_view colName) const = 0;
 
    // clang-format off
    /// \brief Type of a column as a string, e.g. `GetTypeName("x") == "double"`. Required for jitting e.g. `df.Filter("x>0")`.
-   /// \param[in] columnName The name of the column
+   /// \param[in] colName The name of the column
    // clang-format on
-   virtual std::string GetTypeName(std::string_view) const = 0;
+   virtual std::string GetTypeName(std::string_view colName) const = 0;
 
    // clang-format off
    /// Called at most once per column by RDF. Return vector of pointers to pointers to column values - one per slot.
diff --git a/tree/dataframe/inc/ROOT/RResultPtr.hxx b/tree/dataframe/inc/ROOT/RResultPtr.hxx
index 8358832b14..8acb2bfae6 100644
--- a/tree/dataframe/inc/ROOT/RResultPtr.hxx
+++ b/tree/dataframe/inc/ROOT/RResultPtr.hxx
@@ -262,7 +262,7 @@ public:
    /// Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result.
    ///
    /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed
-   /// \param[in] a callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr
+   /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr
    /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls
    ///
    /// See `OnPartialResult` for a generic explanation of the callback mechanism.
diff --git a/tree/dataframe/src/RArrowDS.cxx b/tree/dataframe/src/RArrowDS.cxx
index d9e2fae32f..0152b9a813 100644
--- a/tree/dataframe/src/RArrowDS.cxx
+++ b/tree/dataframe/src/RArrowDS.cxx
@@ -382,8 +382,8 @@ public:
 
 ////////////////////////////////////////////////////////////////////////
 /// Constructor to create an Arrow RDataSource for RDataFrame.
-/// \param[in] table the arrow Table to observe.
-/// \param[in] columns the name of the columns to use
+/// \param[in] inTable the arrow Table to observe.
+/// \param[in] inColumns the name of the columns to use
 /// In case columns is empty, we use all the columns found in the table
 RArrowDS::RArrowDS(std::shared_ptr<arrow::Table> inTable, std::vector<std::string> const &inColumns)
    : fTable{inTable}, fColumnNames{inColumns}
diff --git a/tree/tree/inc/TTree.h b/tree/tree/inc/TTree.h
index 8560e28ab5..e95d4ce301 100644
--- a/tree/tree/inc/TTree.h
+++ b/tree/tree/inc/TTree.h
@@ -357,7 +357,7 @@ public:
    /// possible, unless e.g. type conversions are needed.
    ///
    /// \param[in] name Name of the branch to be created.
-   /// \param[in] obj Array of the objects to be added. When calling Fill(), the current value of the type/object will be saved.
+   /// \param[in] addobj Array of the objects to be added. When calling Fill(), the current value of the type/object will be saved.
    /// \param[in] bufsize he buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.
    /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).
    /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.
diff --git a/tree/tree/src/TIOFeatures.cxx b/tree/tree/src/TIOFeatures.cxx
index 681f2172bd..ca292fb30a 100644
--- a/tree/tree/src/TIOFeatures.cxx
+++ b/tree/tree/src/TIOFeatures.cxx
@@ -51,7 +51,7 @@ using namespace ROOT;
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Clear a specific IO feature from this set.
-/// \param[in] enum_bits The specific feature to disable.
+/// \param[in] input_bits The specific feature to disable.
 ///
 /// Removes a feature from the `TIOFeatures` object; emits an Error message if
 /// the IO feature is not supported by this version of ROOT.
@@ -62,7 +62,7 @@ void TIOFeatures::Clear(Experimental::EIOFeatures input_bits)
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Clear a specific IO feature from this set.
-/// \param[in] enum_bits The specific feature to disable.
+/// \param[in] input_bits The specific feature to disable.
 ///
 /// Removes a feature from the `TIOFeatures` object; emits an Error message if
 /// the IO feature is not supported by this version of ROOT.
@@ -73,7 +73,7 @@ void TIOFeatures::Clear(Experimental::EIOUnsupportedFeatures input_bits)
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Clear a specific IO feature from this set.
-/// \param[in] enum_bits The specific feature to disable.
+/// \param[in] input_bits The specific feature to disable.
 ///
 /// Removes a feature from the `TIOFeatures` object; emits an Error message if
 /// the IO feature is not supported by this version of ROOT.
@@ -115,7 +115,7 @@ static std::string GetUnsupportedName(TBasket::EUnsupportedIOBits enum_flag)
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Set a specific IO feature.
-/// \param[in] enum_bits The specific feature to enable.
+/// \param[in] input_bits The specific feature to enable.
 ///
 /// Sets a feature in the `TIOFeatures` object; emits an Error message if
 /// the IO feature is not supported by this version of ROOT.
@@ -129,7 +129,7 @@ bool TIOFeatures::Set(Experimental::EIOFeatures input_bits)
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Set a specific IO feature.
-/// \param[in] enum_bits The specific feature to enable.
+/// \param[in] input_bits The specific feature to enable.
 ///
 /// Sets a feature in the `TIOFeatures` object; emits an Error message if
 /// the IO feature is not supported by this version of ROOT.
@@ -221,7 +221,7 @@ void TIOFeatures::Print() const
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Test to see if a given feature is set
-/// \param[in] enum_bits The specific feature to test.
+/// \param[in] input_bits The specific feature to test.
 ///
 /// Returns kTRUE if the feature is enables in this object and supported by
 /// this version of ROOT.
@@ -232,7 +232,7 @@ bool TIOFeatures::Test(Experimental::EIOFeatures input_bits) const
 
 ////////////////////////////////////////////////////////////////////////////
 /// \brief Test to see if a given feature is set
-/// \param[in] enum_bits The specific feature to test.
+/// \param[in] input_bits The specific feature to test.
 ///
 /// Returns kTRUE if the feature is enables in this object and supported by
 /// this version of ROOT.
-- 
2.26.2

