diff -ur root-5.32.00.orig/bindings/ruby/src/drr.cxx root-5.32.00/bindings/ruby/src/drr.cxx
--- root-5.32.00.orig/bindings/ruby/src/drr.cxx	2011-12-02 12:41:55.000000000 +0100
+++ root-5.32.00/bindings/ruby/src/drr.cxx	2012-02-12 16:20:46.248535290 +0100
@@ -24,6 +24,17 @@
 
 #include "ruby.h"
 
+// Define macros for old ruby versions
+#ifndef RSTRING_PTR
+#define RSTRING_PTR(s) (RSTRING(s)->ptr)
+#endif
+#ifndef RFLOAT_VALUE
+#define RFLOAT_VALUE(v) (RFLOAT(v)->value)
+#endif
+#ifndef RARRAY_LEN
+#define RARRAY_LEN(s) (RARRAY(s)->len)
+#endif
+
 #include "rrcommon.h"
 
 /* ROOT's global enums.  */
@@ -34,7 +45,7 @@
 #include "dlfcn.h"
 #endif
 
-#if ((R__RUBY_MAJOR<1) || (R__RUBY_MAJOR==1)&&(R__RUBY_MINOR<=9))
+#if ((R__RUBY_MAJOR<1) || (R__RUBY_MAJOR==1)&&(R__RUBY_MINOR<=8))
 #  define rb_frame_this_func rb_frame_last_func
 #endif
 
@@ -158,9 +169,9 @@
    switch (TYPE(o))
       {
       case T_STRING:
-         return (void *) RSTRING(o)->ptr;
+         return (void *) RSTRING_PTR(o);
       case T_FLOAT:
-         return (void *) &RFLOAT(o)->value;
+         return (void *) &RFLOAT_VALUE(o);
       case T_FIXNUM:
          /* FIXME: Memory leak until I find the correct way. Until
           * then please use integers in TTrees with care. --elathan
@@ -172,8 +183,9 @@
          RRGRAB(o, void *, res);
          return res;
       default:
-         rb_fatal ("Failed convertion of %d to void *.\n",
-                   STR2CSTR(CLASS_OF(o)));
+         VALUE tmp = CLASS_OF(o);
+         rb_fatal ("Failed convertion of %d to void *.\n", 
+                   StringValuePtr(tmp));
          break;
       }
 
@@ -392,7 +404,7 @@
       }
 
    VALUE keys = rb_funcall(parms, rb_intern("keys"), 0);
-   for (int i = 0; i < RARRAY(keys)->len; i++)
+   for (int i = 0; i < RARRAY_LEN(keys); i++)
       {
          VALUE key = rb_ary_entry (keys, i);
          rb_funcall (self, rb_to_id (ameth), 2, key, rb_hash_aref (parms, key));
@@ -424,7 +436,7 @@
     * 3. When we want both 1 and 2
     */
 
-   int nargs = RARRAY(inargs)->len - offset;
+   int nargs = RARRAY_LEN(inargs) - offset;
    double *arr = NULL;
    TObject *ptr = NULL;
    VALUE v = 0;
@@ -446,7 +458,7 @@
                if (cproto) strcat(cproto, "double");
                break;
             case T_STRING:
-               if (f) f->SetArg((long) STR2CSTR(arg));
+               if (f) f->SetArg((long) StringValuePtr(arg));
                if (cproto) strcat(cproto, "char*");
                break;
             case T_ARRAY:
@@ -455,8 +467,8 @@
                 */
                if (f)
                   {
-                     arr = ALLOC_N (double, RARRAY(arg)->len);
-                     for (int j = 0; j < RARRAY(arg)->len; j++)
+                     arr = ALLOC_N (double, RARRAY_LEN(arg));
+                     for (int j = 0; j < RARRAY_LEN(arg); j++)
                         arr[j] = NUM2DBL(rb_ary_entry (arg, j));
                      f->SetArg((long) arr);
                   }
@@ -469,7 +481,8 @@
                      Data_Get_Struct (v, TObject, ptr);
                      if (f) f->SetArg((long) ptr);
                      if (cproto) {
-                        strcat(cproto, STR2CSTR(rb_iv_get (arg, "__rr_class__")));
+                        VALUE tmp = rb_iv_get (arg, "__rr_class__");
+                        strcat(cproto, StringValuePtr(tmp));
                         if( ((reference_map>>ntobjects)&0x1) ) {
                            strcat(cproto, "*");
                         } else {
@@ -637,11 +650,11 @@
    VALUE v;
 
    /* Check if there is a ROOT dict. available.  */
-   TClass *c = TClass::GetClass(STR2CSTR(klass));
+   TClass *c = TClass::GetClass(StringValuePtr(klass));
    if (c)
       {
          VALUE k;
-         char *name = STR2CSTR(klass);
+         char *name = StringValuePtr(klass);
          if (!rb_const_defined (rb_cObject, rb_intern(name)))
             k = rb_define_class (name, drrAbstractClass);
          else
@@ -652,7 +665,7 @@
          rb_iv_set (v, "__rr_class__", klass);
       }
    else
-      rb_raise( rb_eArgError, "No TClass found for %s. Is this a Root type?", STR2CSTR(klass) );
+      rb_raise( rb_eArgError, "No TClass found for %s. Is this a Root type?", StringValuePtr(klass) );
 
    return v;
 }
@@ -671,7 +684,7 @@
 
    /* Call the requested ctor.  */
 
-   if (RARRAY(inargs)->len) {
+   if (RARRAY_LEN(inargs)) {
       drr_find_method_prototype (&klass, classname, inargs, cproto, 0);
       drr_set_method_args ( inargs, &func, 0);
    }
@@ -767,7 +780,7 @@
    char * classname = (char *) rb_class2name(self);
 	
    rb_scan_args (argc, argv, "0*", &inargs);
-   nargs = RARRAY(inargs)->len - 1;
+   nargs = RARRAY_LEN(inargs) - 1;
 
    G__CallFunc *func = new G__CallFunc();
    G__ClassInfo *klass = new G__ClassInfo (classname);
@@ -816,12 +829,13 @@
 
    /* Grab method, class and the instance pointer.  */
    methname = (char*) rb_id2name (rb_to_id(argv[0]));
-   classname = STR2CSTR(rb_iv_get (self, "__rr_class__"));
+   VALUE tmp = rb_iv_get (self, "__rr_class__");
+   classname = StringValuePtr(tmp);
    TObject *caller = drr_grab_object (self);
 
    rb_scan_args (argc, argv, "0*", &inargs);
 
-   nargs = RARRAY(inargs)->len - 1;
+   nargs = RARRAY_LEN(inargs) - 1;
    VALUE rklass = rb_class_of (self);
 
    G__CallFunc *func = new G__CallFunc();
@@ -890,7 +904,7 @@
 
    rb_scan_args (argc, argv, "0*", &inargs);
 
-   nargs = RARRAY(inargs)->len;
+   nargs = RARRAY_LEN(inargs);
 
    G__CallFunc *func = NULL;
 
diff -ur root-5.32.00.orig/configure root-5.32.00/configure
--- root-5.32.00.orig/configure	2011-12-02 12:42:22.000000000 +0100
+++ root-5.32.00/configure	2012-02-12 12:11:14.836641595 +0100
@@ -4171,19 +4171,25 @@
     # Check for Ruby include and library
     myruby=`$cwhich ruby 2> /dev/null`
     if test ! "x$myruby" = "x" && test -x "$myruby" ; then
-       rubysysincdir=`ruby -rrbconfig -e 'puts Config::CONFIG["archdir"]'`
-       rubysyslibdir=`ruby -rrbconfig -e 'puts Config::CONFIG["libdir"]'`
+       rubysysincdir=`ruby -rrbconfig -e 'puts RbConfig::CONFIG["includedir"]'`
+       rubysysarchdir=`ruby -rrbconfig -e 'puts RbConfig::CONFIG["archdir"]'`
+       rubysyslibdir=`ruby -rrbconfig -e 'puts RbConfig::CONFIG["libdir"]'`
+       rubysysarch=`ruby -rrbconfig -e 'puts RbConfig::CONFIG["arch"]'`
     fi
-    rubysysincdir2=
+    rubysysarchdir2=
     if test "x$platform" = "xmacosx" ; then
-       rubysysincdir2=`echo $rubysysincdir | sed -e 's/powerpc/universal/'`
+       rubysysarchdir2=`echo $rubysysarchdir | sed -e 's/powerpc/universal/'`
     fi
     check_header "ruby.h" "$rubyincdir" \
         $RUBYDIR ${RUBYDIR:+$RUBYDIR/include} \
-        $rubysysincdir $rubysysincdir2 \
+        $rubysysincdir $rubysysarchdir $rubysysarchdir2 \
         /usr/local/include/ruby /usr/include/ruby
     rubyinc=$found_hdr
     rubyincdir=$found_dir
+    check_header "ruby/config.h" "" $rubysysincdir/$rubysysarch
+    if test "x$found_hdr" != "x" ; then
+        rubyincdir="$rubyincdir $found_dir"
+    fi
 
     if test "x$arch" = "xwin32" || \
        test "x$enable_shared" = "xno" ; then
@@ -6754,7 +6760,7 @@
 
 if test ! "x$enable_ruby" = "xno"; then
    echo "" >> RConfigOptions-out.tmp
-   ruby -rrbconfig -e 'puts Config::CONFIG["ruby_version"]' | \
+   ruby -rrbconfig -e 'puts RbConfig::CONFIG["ruby_version"]' | \
    sed 's/^\([0-9]\)\.\([0-9]\).*$/#define R__RUBY_MAJOR \1@#define R__RUBY_MINOR \2/' | \
    tr '@' '\n' >> RConfigOptions-out.tmp
 fi
